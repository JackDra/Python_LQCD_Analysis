#!/usr/bin/env python

import traits.api as ta
import traitsui.api as tua
from FileIO import ReadXml
from XmlFormatting import MakeValAndErr
from xmltodict import unparse
from collections import OrderedDict
import pandas as pa
# from copy import deepcopy
import os

xml_data = None
latex_data = None

class AlphaFrame( ta.HasTraits ):
    # key_list = range(1,21)
    # this_key = ta.Enum(key_list)
    output_file = ta.Str('')
    this_momentum = ta.Str('p000')
    this_flow_time = ta.Str('t_f6.01')
    this_parameter = ta.Str(r'\alpha')
    do_chi = ta.Bool(True)
    do_chi_err = ta.Bool(True)
    Load = ta.Button()
    Show = ta.Button()
    Show_latex = ta.Button()
    Apply = ta.Button()
    #
    view = tua.View(
        tua.Item('output_file'),
        tua.Item('this_momentum'),
        tua.Item('this_flow_time'),
        tua.Item('this_parameter'),
        tua.Item('do_chi'),
        tua.Item('do_chi_err',enabled_when='do_chi'),
        tua.Item('Load', show_label=False),
        tua.Item('Show', show_label=False),
        tua.Item('Show_latex', show_label=False),
        tua.Item('Apply', show_label=False),
        buttons=['OK'],
        resizable=True
    )
    #
    def _Load_fired(self):
        global xml_data
        if xml_data is None:
            raise EnvironmentError('plot data has not been loaded')
        # self.key_list = xml_data.plot_data.keys()
        self.output_file = xml_data['Results']['save_file']


    def _Show_fired(self):
        global xml_data
        print unparse(xml_data,pretty=True)

    def _Show_latex_fired(self):
        global latex_data
        if latex_data is None:
            print 'latex data not generated yet'
        else:
            print latex_data


    def _Apply_fired(self):
        global xml_data,latex_data
        this_data = xml_data['Results']
        if 'Fits' not in this_data.keys():
            print 'Fits not in keys'
            print this_data.keys()
            return
        this_data = this_data['Fits']
        if self.this_momentum not in this_data.keys():
            print self.this_momentum , ' not in momentum keys '
            print this_data.keys()
            return
        this_data = this_data[self.this_momentum]
        if self.this_flow_time not in this_data.keys():
            print self.this_flow_time , ' not in flow time keys '
            print this_data.keys()
            return
        this_data = this_data[self.this_flow_time]
        vall,ilist,chil,slist1,slist2 = [],[],[],[],[]
        for ikey,idata in this_data.iteritems():
            this_p = self.this_parameter.replace('\\alpha','alpha')
            if this_p in idata.keys():
                if isinstance(idata[this_p],dict) or isinstance(idata[this_p],OrderedDict):
                    vall.append(MakeValAndErr(idata[this_p]['Avg'],idata[this_p]['Std']))
                else:
                    vall.append(idata[this_p])
                if 'Chi_pow_2_pdf' in idata.keys():
                    if isinstance(idata['Chi_pow_2_pdf'],dict) or isinstance(idata['Chi_pow_2_pdf'],OrderedDict):
                        chil.append(MakeValAndErr(idata['Chi_pow_2_pdf']['Avg'],idata['Chi_pow_2_pdf']['Std']))
                    else:
                        chil.append(idata['Chi_pow_2_pdf'])
                ilist.append(ikey)
                leftval,rightval = map(float,ikey[-4:].split('-'))
                slist1.append(1/rightval)
                slist2.append(leftval)
        dump,dump2,ilist,vall,chil =  (list(x) for x in zip(*sorted(zip(slist1,slist2,ilist,vall,chil))))
        latex_data = pa.DataFrame(index=ilist)
        latex_data.loc[:,self.this_parameter+' Avg'] = pa.Series(vall,index=ilist)
        if len(vall) == len(chil) and self.do_chi:
            latex_data.loc[:,self.this_parameter+' chi2pdf'] = pa.Series(chil,index=ilist)
        with open(xml_data['Results']['save_file'],'w') as f:
            format_output = FormatLatex(latex_data.to_latex())
            f.write(format_output)


class FlowOpFrame( ta.HasTraits ):
    # key_list = range(1,21)
    # this_key = ta.Enum(key_list)
    output_file = ta.Str('')
    this_flow_time = ta.Str('t_f6.01')
    this_t_sum = ta.Str('ts63')
    this_parameter = ta.Str('A')
    do_chi = ta.Bool(True)
    do_chi_err = ta.Bool(True)
    Load = ta.Button()
    Show = ta.Button()
    Show_latex = ta.Button()
    Apply = ta.Button()
    #
    view = tua.View(
        tua.Item('output_file'),
        tua.Item('this_flow_time'),
        tua.Item('this_t_sum'),
        tua.Item('this_parameter'),
        tua.Item('do_chi'),
        tua.Item('do_chi_err',enabled_when='do_chi'),
        tua.Item('Load', show_label=False),
        tua.Item('Show', show_label=False),
        tua.Item('Show_latex', show_label=False),
        tua.Item('Apply', show_label=False),
        buttons=['OK'],
        resizable=True
    )
    #
    def _Load_fired(self):
        global xml_data
        if xml_data is None:
            raise EnvironmentError('plot data has not been loaded')
        # self.key_list = xml_data.plot_data.keys()
        self.output_file = xml_data['Results']['save_file']


    def _Show_fired(self):
        global xml_data
        print unparse(xml_data,pretty=True)

    def _Show_latex_fired(self):
        global latex_data
        if latex_data is None:
            print 'latex data not generated yet'
        else:
            print latex_data


    def _Apply_fired(self):
        global xml_data,latex_data
        this_data = xml_data['Results']
        vall,ilist,chil,slist1,slist2 = [],[],[],[],[]
        if 'Chi_boot' not in this_data.keys():
            print 'Integrated FlowOp result not in keys'
        else:
            this_data = this_data['Chi_boot']
            if self.this_flow_time not in this_data.keys():
                print self.this_flow_time , ' not in flow time keys '
                print this_data.keys()
                return
            this_data = this_data[self.this_flow_time]
            if isinstance(this_data,dict) or isinstance(this_data,OrderedDict):
                vall.append(MakeValAndErr(this_data['Avg'],this_data['Std']))
            else:
                vall.append(this_data)
            chil.append('N.A.')
            ilist.append('chiint')

        this_data = xml_data['Results']
        if 'Prop_Fit' not in this_data.keys():
            print 'Fits not in keys'
            print this_data.keys()
            return
        this_data = this_data['Prop_Fit']
        if self.this_flow_time not in this_data.keys():
            print self.this_flow_time , ' not in flow time keys '
            print this_data.keys()
            return
        this_data = this_data[self.this_flow_time]
        if self.this_t_sum not in this_data.keys():
            print self.this_t_sum , ' not in sum source time keys '
            print this_data.keys()
            return
        this_data = this_data[self.this_t_sum]
        for ikey,idata in this_data.iteritems():
            this_p = self.this_parameter
            if this_p in idata.keys():
                if isinstance(idata[this_p],dict) or isinstance(idata[this_p],OrderedDict):
                    vall.append(MakeValAndErr(idata[this_p]['Avg'],idata[this_p]['Std']))
                else:
                    vall.append(idata[this_p])
                if 'Chi_pow_2_pdf' in idata.keys():
                    if isinstance(idata['Chi_pow_2_pdf'],dict) or isinstance(idata['Chi_pow_2_pdf'],OrderedDict):
                        chil.append(MakeValAndErr(idata['Chi_pow_2_pdf']['Avg'],idata['Chi_pow_2_pdf']['Std']))
                    else:
                        chil.append(idata['Chi_pow_2_pdf'])
                ilist.append(ikey)
                leftval,rightval = map(float,ikey.replace('fitr','').split('-'))
                slist1.append(1/rightval)
                slist2.append(leftval)
        dump,dump2,ilisttemp,valltemp,chiltemp =  (list(x) for x in zip(*sorted(zip(slist1,slist2,ilist[1:],vall[1:],chil[1:]))))
        ilist = [ilist[0]] + ilisttemp
        vall = [vall[0]] + valltemp
        chil = [chil[0]] + chiltemp
        latex_data = pa.DataFrame(index=ilist)
        latex_data.loc[:,self.this_parameter+' Avg'] = pa.Series(vall,index=ilist)
        if len(vall) == len(chil) and self.do_chi:
            latex_data.loc[:,self.this_parameter+' chi2pdf'] = pa.Series(chil,index=ilist)
        with open(xml_data['Results']['save_file'],'w') as f:
            format_output = FormatLatex(latex_data.to_latex())
            f.write(format_output)


def FormatLatex(output):
    this_out = output.replace(r'\textbackslashalpha',r'\alpha')
    this_out = this_out.replace(r'\_',r' ')
    this_out = this_out.replace('chi2pdf',r'\chi^{2}_{pdf}')
    this_out = this_out.replace('chiint',r'\chi_{int}')
    return this_out

class BeginFrame( ta.HasTraits ):
    """
    starting frame, to select what type of thing you want to do
    options are:
    """

    file_name = ta.Str( '/home/jackdra/PHD/CHROMA/TestVar/scratch/resultsPandasNew'+
                        '/HPCCRES/Test/RC32x64_kud1375400_ks1364000_-ab-_TopCharge_Fullchit_sumrange.xml')
    Alpha_window = AlphaFrame()
    FlowOp_window = FlowOpFrame()
    Load_FlowOp = ta.Button()
    Load_Alpha = ta.Button()

    view = tua.View(
        '_',
        tua.Item('file_name'),
        tua.Item('Load_FlowOp', show_label=False),
        tua.Item('Load_Alpha', show_label=False),
        buttons=['OK'],
        resizable=True
    )

    def _Load_Alpha_fired(self):
        global xml_data
        xml_data = {}
        xml_data['save_file'] = self.file_name
        if os.path.isfile(self.file_name):
            xml_data = ReadXml(self.file_name)
            xml_data['Results']['save_file'] = self.file_name.replace('.xml','.tex')
            self.Alpha_window.configure_traits()
        else:
            print 'File not found:'
            print xml_data['save_file']


    def _Load_FlowOp_fired(self):
        global xml_data
        xml_data = {}
        xml_data['save_file'] = self.file_name
        if os.path.isfile(self.file_name):
            xml_data = ReadXml(self.file_name)
            xml_data['Results']['save_file'] = self.file_name.replace('.xml','.tex')
            self.FlowOp_window.configure_traits()
        else:
            print 'File not found:'
            print xml_data['save_file']





if  __name__ == "__main__":
    Start = BeginFrame()
    Start.configure_traits()
