#!/usr/bin/env python


# IMPORT THIS FIRST, put in base import file
import numpy as np
import pandas as pa
from XmlFormatting import MakeValAndErr
from MiscFuns import human_format,logNA
from Params import nboot,normed_histograms,percentile
import warnings
from Params import Debug_Mode
# import matplotlib
# matplotlib.use('Agg')  # Must be before importing matplotlib.pyplot or pylab!

"""
How to use:

BootStrap(nboot)
creates class with nbootstraps


.ImportData(data)
Imports data into bootstrap

.MakeBS()
Creates bootstrapped data

.Stats()
Creates .Avg and .Std

.BootHistogram()
Creates histogram (only plot command, do label and savefig after).


One thing to note, Casting to differnet type will perminatly cast the bootstrap to that type (even if passed into function and combined wiht other bs).
"""


startseed = 1234


# def MeanOfBoots(bootlist):
#     return np.mean(bootlist)
#     # return np.average(bootlist)
#     # return np.sum(np.array(bootlist)/float(len(bootlist)))


class BootStrap(object):
    """ Class that a single boostrapped quantity Xi for i cfgvals
        And Constructs boostrapped cfgvals Xb for b bootstraped values

    """

    parentlist = ['SetOfCorrs.SetOfTwoPt','TwoPtCorrelators.TwoPointCorr','TwoPtCorrelators.TwoPointCorr','TwoPtCorrelators.NNQCorr']

    def __init__(self, thisnboot=nboot, name='',cfgvals='None',bootvals='None',thisDelVal=True,rand_list=None):
        self.nboot = thisnboot  # number of bootstrap samples

        self.nval = 0.0  # contains length of cfgvalsn
        # These are for legasy versions, that did not use pandas.
        # will eventually depreciate
        self.bootvals = pa.Series(name='bootvals')
        self.cfgvals = pa.Series(name='cfgvals')

        self.name = name  # Give it a label if you want, might help with plotting?
        self.Avg = np.float64(np.nan)
        self.Std = np.float64(np.nan)
        self.Median = np.float64(np.nan)
        self.MedStd = np.float64(np.nan)
        self.MedStd_Low = np.float64(np.nan)
        self.MedStd_High = np.float64(np.nan)
        self.current = 0
        self.rand_list = rand_list

        if isinstance(bootvals,(list,tuple,np.ndarray,pa.Series)):
            self.ImportBS(bootvals)
        else:
            if isinstance(cfgvals,(list,tuple,np.ndarray,pa.Series)):
                self.ImportData(cfgvals)
                self.MakeBS(DelVal=thisDelVal)

    def CheckBoot(self):
        if self.bootvals.size == 0:
            raise EnvironmentError(self.name + ' has does not contain boostrapped values')
        if float('NaN') in self.bootvals:
            warnings.warn('Bootstrap has NaN present, ignorning NaNs')

    def CheckCfgVals(self):
        if self.cfgvals.size == 0:
            raise EnvironmentError(self.name + ' has does not contain configuration values')

    def GetNaNIndex(self):
        return pa.isnull(self.bootvals).nonzero()[0]

    def GetNanIndex_cfgs(self):
        return pa.isnull(self.cfgvals).nonzero()[0]


    def Stats(self):
        # print self.bootvals
        self.CheckBoot()
        self.Avg = self.bootvals.mean()
        self.Std = self.bootvals.std()
        self.Median = self.bootvals.median()
        self.MedStd_Low = self.bootvals.quantile(percentile)
        self.MedStd_High = self.bootvals.quantile(1-percentile)
        self.MedStd = (self.MedStd_High-self.MedStd_Low )/2
        self.MedStd_Up = self.MedStd_High-self.Median
        self.MedStd_Down = self.Median - self.MedStd_Low
        self.Min = self.bootvals.min()
        self.Max = self.bootvals.max()
        return self

    def RemoveVals(self):
        self.cfgvals = pa.Series(name='cfgvals')
        # self.cfgvals = None
        self.nval = 0.0

    def RemoveBoots(self):
        self.bootvals = pa.Series(name='bootvals')
        # self.bootvals = None

    def ImportData(self,cfgvals):
        if isinstance(cfgvals,pa.Series):
            self.cfgvals = cfgvals
        else:
            self.cfgvals = pa.Series(cfgvals,name='cfgvals')
        self.nval = self.cfgvals.size



    def ImportBS(self,inputboot,DelVal=True):
        if DelVal: self.RemoveVals()
        if isinstance(inputboot,pa.Series):
            if not isinstance(inputboot.dtype,(int,float,complex,long,np.dtype)) :
                print inputboot.dtype
                raise EnvironmentError('Class got passed to bootvals, or multiple keys exist')
            if len(inputboot) == self.nboot:
                self.bootvals = inputboot
                self.bootvals.name = 'bootvals'
            else:
                raise IOError('nboots dont match up')
        else:
            if not isinstance(inputboot[0],(int,float,complex,long)) :
                print type(inputboot[0])
                raise EnvironmentError('Class got passed to bootvals'+str(inputboot[0]))
            if len(inputboot) == self.nboot:
                self.bootvals = pa.Series(inputboot,name='bootvals')
            else:
                raise IOError('nboots dont match up')
        self.Stats()


    def Get_Rand_List(self,wipe_rlist=True):
        this_rlist = self.rand_list
        if wipe_rlist:
            self.rand_list = None
        return this_rlist

    def MakeBS(self,DelVal=True):
        self.CheckCfgVals()
        myseed=startseed*self.nval/self.nboot
        # self.Avg = np.average(self.values)
        if not isinstance(self.rand_list,np.ndarray):
            np.random.seed(myseed)
            self.rand_list = np.random.randint(0,high=self.nval,size=(self.nboot,self.nval))
        tempbootvals = [self.cfgvals.values[iboot].mean() for iboot in self.rand_list]
        ## above is faster than below
        # tempbootvals = []
        # for iboot in xrange(self.nboot):
        #     # print 'DEBUG',iboot
        #     # print self.data.cfgvals.sample(self.nval, random_state=myseed+iboot).head()
        #     # print self.data.cfgvals.sample(self.nval, random_state=myseed+iboot).mean()
        #     # print
        #     ## TODO, check if differnet streams need to be separated out.
        #     tempbootvals.append(self.cfgvals.sample(self.nval, replace=True,random_state=myseed+iboot).mean())
        self.ImportBS(tempbootvals,DelVal=DelVal)
        self.Stats()




    # Operator overloading

    # Comparisons

    def __str__(self):
        return 'BS_'+self.name+': '+MakeValAndErr(self.Avg,self.Std)

    def __repr__(self):
        return '<BS_'+self.name+'_'+MakeValAndErr(self.Avg,self.Std,Dec=1)+'>'

    def __lt__(self,bs2):
        # self.Stats()
        if isinstance(bs2,BootStrap):
            return self.Avg+self.Std < bs2.Avg-bs2.Std
        else:
            return self.Avg+self.Std < bs2

    def __le__(self,bs2):
        # self.Stats()
        if isinstance(bs2,BootStrap):
            return self.Avg-self.Std <= bs2.Avg+bs2.Std
        else:
            return self.Avg-self.Std <= bs2


    def __gt__(self,bs2):
        # self.Stats()
        if isinstance(bs2,BootStrap):
            return self.Avg-self.Std > bs2.Avg+bs2.Std
        else:
            return self.Avg-self.Std > bs2

    def __ge__(self,bs2):
        # self.Stats()
        if isinstance(bs2,BootStrap):
            return self.Avg+self.Std >= bs2.Avg-bs2.Std
        else:
            return self.Avg+self.Std >= bs2


    def __eq__(self,bs2):
        return (self <= bs2) and (self >= bs2)


    def __ne__(self,bs2):
        return (self < bs2) or (self > bs2)

    ## If you uncomment this, it breaks the program,
    ## interestingly, it lets you cast a bootstrap class to a numpy array.
    # def __len__(self):
    #     return self.nboot
    # Numerical operatoions

    def Log(self):
        result = BootStrap(self.nboot,name='log('+str(self)+')')
        result.cfgvals = logNA(self.cfgvals)
        result.bootvals = logNA(self.bootvals)
        return result

    def Exp(self):
        result = BootStrap(self.nboot,name='e^('+str(self)+')')
        result.cfgvals = np.exp(self.cfgvals)
        result.bootvals = np.exp(self.bootvals)
        return result

    def sin(self):
        result = BootStrap(self.nboot,name='sin('+str(self)+')')
        result.cfgvals = np.sin(self.cfgvals)
        result.bootvals = np.sin(self.bootvals)
        return result

    def sinh(self):
        result = BootStrap(self.nboot,name='sinh('+str(self)+')')
        result.cfgvals = np.sinh(self.cfgvals)
        result.bootvals = np.sinh(self.bootvals)
        return result


    def arcsinh(self):
        result = BootStrap(self.nboot,name='arcsinh('+str(self)+')')
        result.cfgvals = np.arcsinh(self.cfgvals)
        result.bootvals = np.arcsinh(self.bootvals)
        return result

    def cos(self):
        result = BootStrap(self.nboot,name='cos('+str(self)+')')
        result.cfgvals = np.cos(self.cfgvals)
        result.bootvals = np.cos(self.bootvals)
        return result

    def Sqrt(self):
        result = BootStrap(self.nboot,name='sqrt('+str(self)+')')
        result.cfgvals = np.sqrt(self.cfgvals)
        result.bootvals = np.sqrt(self.bootvals)
        return result


    def ResampleBS(self,new_nboot=nboot,rand_list=None):
        if new_nboot == self.nboot:
            return self
        if rand_list is None:
            rand_list = np.random.choice(self.nboot,size=new_nboot,replace=True)
        new_bootvals = self.bootvals.iloc[rand_list].reset_index()['bootvals']
        # new_bootvals = self.bootvals.iloc[rand_list].reset_index()['bootvals'].values
        return BootStrap(new_nboot,name=self.name+'_RS'+human_format(new_nboot),bootvals=new_bootvals),rand_list


    def corr(self,bs2):
        if not isinstance(bs2,BootStrap):
            raise IOError('pass bootstrap variable into correlation')
        else:
            return self.bootvals.corr(bs2.bootvals)

    def cfg_corr(self,bs2):
        if not isinstance(bs2,BootStrap):
            raise IOError('pass bootstrap variable into correlation')
        else:
            return self.cfgvals.corr(bs2.cfgvals)


    def __add__(self,bs2):
        if type(bs2) in BootStrap.parentlist:
            return bs2.__radd__(self)
        else:
            result = BootStrap(self.nboot,name='+'.join([str(self).replace('BS_',''),str(bs2).replace('BS_','')]))
            if isinstance(bs2,BootStrap):
                result.cfgvals = self.cfgvals + bs2.cfgvals
                result.bootvals = self.bootvals + bs2.bootvals
            else:
                try:
                    result.cfgvals = self.cfgvals + bs2
                    result.bootvals = self.bootvals + bs2
                except:
                    print type(bs2)
                    raise EnvironmentError('Invalid value to combine with BootStrap class')
            return result


    def __sub__(self,bs2):
        if type(bs2) in BootStrap.parentlist:
            return bs2.__rsub__(self)
        else:
            result = BootStrap(self.nboot,name='-'.join([str(self).replace('BS_',''),str(bs2).replace('BS_','')]))
            if isinstance(bs2,BootStrap):
                result.cfgvals = self.cfgvals - bs2.cfgvals
                result.bootvals = self.bootvals - bs2.bootvals
            else:
                try:
                    result.cfgvals = self.cfgvals - bs2
                    result.bootvals = self.bootvals - bs2
                except:
                    print type(bs2)
                    raise EnvironmentError('Invalid value to combine with BootStrap class')
            return result


    def __mul__(self,bs2):
        if type(bs2) in BootStrap.parentlist:
            return bs2.__rmul__(self)
        else:
            result = BootStrap(self.nboot,name='*'.join([str(self).replace('BS_',''),str(bs2).replace('BS_','')]))
            if isinstance(bs2,BootStrap):
                result.cfgvals = self.cfgvals * bs2.cfgvals
                result.bootvals = self.bootvals * bs2.bootvals
            else:
                try:
                    result.cfgvals = self.cfgvals * bs2
                    result.bootvals = self.bootvals * bs2
                except:
                    print type(bs2)
                    raise EnvironmentError('Invalid value to combine with BootStrap class')
            return result

    def __truediv__(self,bs2):
        return self.__div__(bs2)

    def __floordiv__(self,bs2):
        return self.__div__(bs2)

    def __div__(self,bs2):
        if type(bs2) in BootStrap.parentlist:
            return bs2.__rdiv__(self)
        else:
            result = BootStrap(self.nboot,name='/'.join([str(self).replace('BS_',''),str(bs2).replace('BS_','')]))
            if isinstance(bs2,BootStrap):
                result.cfgvals = self.cfgvals / bs2.cfgvals
                result.bootvals = self.bootvals / bs2.bootvals
            else:
                try:
                    result.cfgvals = self.cfgvals / bs2
                    result.bootvals = self.bootvals / bs2
                except Exception as err:
                    print type(self.bootvals)
                    print type(self.cfgvals)
                    print 'in bootstrap ',type(bs2)
                    raise EnvironmentError(str(err) +'\nInvalid value to combine with BootStrap class')
            return result

    def __pow__(self,bs2):
        if type(bs2) in BootStrap.parentlist:
            return bs2.__rpow__(self)
        else:
            result = BootStrap(self.nboot,name='^'.join([str(self).replace('BS_',''),str(bs2).replace('BS_','')]))
            if isinstance(bs2,BootStrap):
                result.cfgvals = self.cfgvals ** bs2.cfgvals
                result.bootvals = self.bootvals ** bs2.bootvals
            else:
                try:
                    result.cfgvals = self.cfgvals ** bs2
                    result.bootvals = self.bootvals ** bs2
                except Exception as err:
                    print type(bs2)
                    raise EnvironmentError(str(err) + '\nInvalid value to combine with BootStrap class')
            return result


    # Right multiplication functions

    def __radd__(self,bs2):
        if isinstance(bs2,BootStrap):
            return bs2.add(self)
        else:
            result = BootStrap(self.nboot,name='+'.join([str(bs2),str(self)]))
            try:
                result.cfgvals = bs2 + self.cfgvals
                result.bootvals = bs2 + self.bootvals
            except:
                print type(bs2)
                raise EnvironmentError('Invalid value to combine with BootStrap class')
        return result


    def __rsub__(self,bs2):
        if isinstance(bs2,BootStrap):
            bs2.sub(self)
        else:
            result = BootStrap(self.nboot,name='-'.join([str(bs2),str(self)]))
            try:
                result.cfgvals = bs2 - self.cfgvals
                result.bootvals = bs2 - self.bootvals
            except:
                print type(bs2)
                raise EnvironmentError('Invalid value to combine with BootStrap class')
        return result


    def __rmul__(self,bs2):
        if isinstance(bs2,BootStrap):
            bs2.mult(self)
        else:
            result = BootStrap(self.nboot,name='*'.join([str(bs2),str(self)]))
            try:
                result.cfgvals = bs2 * self.cfgvals
                result.bootvals = bs2 * self.bootvals
            except:
                print type(bs2)
                raise EnvironmentError('Invalid value to combine with BootStrap class')
        return result


    def __rdiv__(self,bs2):
        if isinstance(bs2,BootStrap):
            bs2.div(self)
        else:
            result = BootStrap(self.nboot,name='/'.join([str(bs2),str(self)]))
            try:
                result.cfgvals = bs2 / self.cfgvals
                result.bootvals = bs2 / self.bootvals
            except Exception as err:
                print type(bs2)
                raise EnvironmentError(str(err) +'\nInvalid value to combine with BootStrap class')
        return result



    def __rpow__(self,bs2):
        if isinstance(bs2,BootStrap):
            bs2.pow(self)
        else:
            result = BootStrap(self.nboot,name='^'.join([str(self).replace('BS_',''),str(bs2).replace('BS_','')]))
            try:
                result.cfgvals = bs2 ** self.cfgvals
                result.bootvals = bs2 ** self.bootvals
            except:
                print type(bs2)
                raise EnvironmentError('Invalid value to combine with BootStrap class')
        return result



    # unitary arithmetic operations


    def __neg__(self):
        return BootStrap(self.nboot,name = '-'+self.name,cfgvals = -self.cfgvals,bootvals=-self.bootvals)

    def __pos__(self):
        return self

    def __abs__(self):
        return BootStrap(self.nboot,name = '|'+self.name+'|',cfgvals = np.abs(self.cfgvals),bootvals=np.abs(self.bootvals))

    # Casting, just casts the bootstrap values

    def __complex__(self):
        self.cfgvals = self.cfgvals.astype(complex)
        self.bootvals = self.bootvals.astype(complex)
        self.Stats()
        return self.Avg

    def __int__(self):
        self.cfgvals = self.cfgvals.astype(int)
        self.bootvals = self.bootvals.astype(int)
        self.Stats()
        return int(round(self.Avg))

    def __float__(self):
        self.cfgvals = self.cfgvals.astype(np.float64)
        self.bootvals = self.bootvals.astype(np.float64)
        self.Stats()
        return self.Avg

    def __round__(self):
        self.cfgvals = self.cfgvals.round
        self.bootvals = self.bootvals.round
        self.Stats()
        return self.Avg

    def __iter__(self):
        return self

    def next(self):
        if self.current >= self.nboot:
            self.current = 0
            raise StopIteration
        else:
            self.current += 1
            if self.current >= self.nboot+1:
                return 0.0
            else:
                return self.bootvals[self.current-1]

    def __setitem__(self, key, value ):
        self.bootvals[key] = value

    def __getitem__(self, key):
        return self.bootvals[key]

    def __reversed__(self):
        return self.bootvals[::-1]

    #This would stuff up your statistics

    # def __delitem__(self,key):
    #     self.bootvals = np.delete(self.bootvals,key)
    #     self.nboot -= 1


    def BootHistogram(  self,plot_plane,histtype='stepfilled',label='',color=None,alpha=None,
                        key_val=True,norm=normed_histograms,Median=False):
        self.CheckBoot()
        self.Stats()
        if len(label) == 0:
            label = self.name
        if Median:
            plot_plane.axvline(self.Median,color=color)
            plot_plane.axvline(self.MedStd_Low,color=color,alpha=alpha/2.)
            plot_plane.axvline(self.MedStd_High,color=color,alpha=alpha/2.)
            if key_val and label is not None:
                label = label+' $Res_Median='+MakeValAndErr(self.Avg,self.Std)+'$'
        else:
            plot_plane.axvline(self.Avg,color=color)
            plot_plane.axvline(self.Avg-self.Std,color=color,alpha=alpha/2.)
            plot_plane.axvline(self.Avg+self.Std,color=color,alpha=alpha/2.)
            if key_val and label is not None:
                label = label+' $Res='+MakeValAndErr(self.Median,self.MedStd)+'$'
        plot_plane.hist(self.bootvals.values,histtype=histtype,label=label,color=color,alpha=alpha,density=norm)
        return plot_plane

    def Histogram(self,plot_plane,histtype='stepfilled',label='',color=None,alpha=None):
        self.CheckCfgVals()
        plot_plane.hist(self.cfgvals.values,histtype=histtype,label=self.name+ ' Cfgs '+label,color=color,alpha=alpha)


def TestBoot():
    values = np.random.uniform(size=200)
    testdata = BootStrap(200,name='test_bootstrap_uniform',cfgvals=values,thisDelVal=False)



    values2 = np.arange(200)/200.
    testdata2 = BootStrap(200,name='test_bootstrap_arange',cfgvals=values2,thisDelVal=False)


    values3 = np.random.normal(loc=0.5,scale=0.25,size=200)
    testdata3 = BootStrap(200,name='test_bootstrap_normal',cfgvals=values3,thisDelVal=False)
    return testdata,testdata2,testdata3


if __name__ == '__main__':
    data,data2,data3 = TestBoot()
