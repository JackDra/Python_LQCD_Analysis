#!/usr/bin/env python

import numpy as np

from TwoPtCorrelators import TwoPointCorr

"""
How to use:

IN DEV

takes TwoPointCorr instances and combines them

"""



class VariationalTwoPt(object):

    '''
    TODO:
    Check source-sink index convensions for C2_array

    '''

    def __init__(self, C2_array = [[]], thissym='Not Set',thiscol='Not Set',thisshift=0.0,name=''):


        self.thischecklist = ['nboot','nt','ProjStr','ism','jsm','tsrc','kud','ks']
        ## C2_array [ ism , jsm ]
        ## OR C2_array [ jsm , ism ] ???
        self.C2_array = np.array(C2_array)
        if self.C2_array.ndim != 2:
            print self.C2_array.ndim
            raise ImportError('C2 array must be two dimensional, even if only projecting single dimension')

        if any([not isinstance(iC2,TwoPointCorr) for iC2 in self.C2_array.flatten()]):
            raise ImportError('Currently functionallity is for TwoPtCorr classes only')

        ## ism_values [ ism , jsm ]
        ## jsm_values [ ism , jsm ]
        self.ism_values, self.jsm_values = np.array([]),np.array([])
        self.pmom = self.C2_array[0,0].pform
        for iC2 in self.C2_array.flatten():
            self.ism_values = np.append(self.ism_values,iC2.ism)
            self.jsm_values = np.append(self.jsm_values,iC2.jsm)
            if len(iC2.pform) < len(self.pmom):
                self.pmom = iC2.pform
        self.ism_values.reshape(self.C2_array.shape)
        self.jsm_values.reshape(self.C2_array.shape)

        self.left_evec = self.right_evec = np.array([])
