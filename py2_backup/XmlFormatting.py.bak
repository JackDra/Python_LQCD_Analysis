#!/usr/bin/env python

# from Params import *
from collections import OrderedDict
import numpy as np
from MiscFuns import is_number,get_val_float_0,get_val,get_val_float
import pandas as pa
from uncertainties import ufloat

minfmt,maxfmt = 0.0001,1000




def GetInfoFromFilelist(filedict):
    dictout = OrderedDict()
    dictout['nconfig'] = len(filedict.keys())
    lenths = []
    for ikey,cfglist in filedict.iteritems():
        lenths.append(len(cfglist))
    dictout['nsrcAvg'] = np.mean(lenths)
    dictout['nMeasure'] = np.sum(lenths)
    return dictout

def CreateDefaultInfodict():
    dictout = OrderedDict()
    dictout['nconfig'] = -1
    dictout['nsrcAvg'] = -1
    dictout['nMeasure'] = -1
    return dictout


def epsstr(ieps):
    if isinstance(ieps,float):
        return 'p{:.1e}'.format(ieps)
    elif 'p' in ieps:
        return ieps
    else:
        return 'p'+ieps

def unepsstr(ieps):
    return float(str(ieps).replace('p',''))

def tflowstr(it):
    if isinstance(it,float):
        return 't_f{:.2f}'.format(it)
    else:
        return 't_f{:.2f}'.format(float(it.replace('t_f','')))

def untflowstr(it):
    return float(str(it).replace('t_f','').replace('tflow',''))

def tflowTOLeg(it):
    return it.replace('t_f',r't_{f}=').replace('tflow',r't_{f}=')


def TOLegGeneric(string,str_cmpr):
    split_str = string.split(str_cmpr)
    new_sc = str_cmpr.replace('t_f',r't_{f}')
    new_sc = new_sc.replace('to',r't_{o}')
    new_sc = new_sc.replace('tss',r't_{ss}')
    new_sc = new_sc.replace('ts',r't_{s}')
    if len(split_str) == 1:
        return string
    else:
        out_list = [split_str[0]]
        for itt in split_str[1:]:
            if len(itt) > 0 and is_number(itt[0]):
                out_list.append(new_sc+'='+itt)
            else:
                out_list.append(str_cmpr+itt)
        return ''.join(out_list)

def tsinkTOLeg(it):
    return TOLegGeneric(it,'t')

def tsrcTOLeg(it):
    return TOLegGeneric(it,'to')

def tsumTOLeg(it):
    return TOLegGeneric(TOLegGeneric(it,'tss'),'ts')

def MakeVal(Avg,Dec=2):
    return ('{0:.'+str(Dec)+'f}').format(Avg)


def MakeValAndErr(Avg,Err,Dec=1,MagThresh=3,latex=False):
    this_val = ufloat(Avg,Err)
    fmt_str = '{:.'+str(Dec)
    if 10**-MagThresh > max(Avg,Err) or max(Avg,Err)  > 10**MagThresh:
        fmt_str += 'e'
    else:
        fmt_str += 'u'
    if latex:
        fmt_str = fmt_str+r'SL}'
    else:
        fmt_str += 'S}'
    return fmt_str.format(this_val)

def tstr(it):
    return 't'+str(it)

def tsumstr(itsum):
    if 'tss' in str(itsum):
        return 'tss'+str(itsum).replace('tss','')
    else:
        return 'ts'+str(itsum).replace('ts','')

def untsumstr(itsum):
    return int(str(itsum).replace('tss','').replace('ts',''))

def untstr(it):
    return int(str(it).replace('to','').replace('tss','').replace('ts','').replace('tr','').replace('t',''))

def xmlcut(icut):
    if isinstance( icut, int ):
        return 'cut'+str(icut)
    else:
        return 'cut'+'-'.join(map(str,icut))

def unxmlcut(icut):
    if '-' in icut:
        return map(int,icut.replace('cut','').split('-'))
    else:
        return int(icut.replace('cut',''))


def AvgStdToFormat(Avg,Std,frmtflag='f',dec=10,numlen=20):
    if minfmt < abs(Avg) < maxfmt: frmtflag = 'f'
    else: frmtflag = 'e'
    totfmt = str(numlen)+'.'+str(dec)+frmtflag
    return ('{0:'+totfmt+'} {1:'+totfmt+'}').format(Avg,Std)

def AvgFormat(Avg,frmtflag='f',dec=10,numlen=20):
    if minfmt < abs(Avg) < maxfmt: frmtflag = 'f'
    else: frmtflag = 'e'
    totfmt = str(numlen)+'.'+str(dec)+frmtflag
    return ('{0:'+totfmt+'}').format(Avg)

def DictAvgStdToFormat(Dict,frmtflag='f'):
    return AvgStdToFormat(Dict['Avg'],Dict['Std'],frmtflag=frmtflag)

def BootAvgStdToFormat(Dict,frmtflag='f'):
    return AvgStdToFormat(Dict.Avg,Dict.Std,frmtflag=frmtflag)

def FormatToAvgStd(String):
    return map(float,String.strip().split())

def FormatToDictAvgStd(String):
    return dict(zip(['Avg','Std'],FormatToAvgStd(String)))

def QsqrdToFormat(qsqrd):
    return '{0:3.2f}'.format(float(qsqrd))


def MomToFormat(mom,frmtflag='f'):
    thisfmt = ' '.join(['{'+str(imom)+':20.10'+frmtflag+'} ' for imom in xrange(len(mom))])
    return (thisfmt).format(*mom)

def AvgStdChiToFormat(Avg,Std,Chi,frmtflag='f'):
    if minfmt < abs(Avg) < maxfmt: frmtflag = 'f'
    else: frmtflag = 'e'
    return ('{0:20.10'+frmtflag+'} {1:20.10'+frmtflag+'} {2:20.10f}').format(Avg,Std,Chi)

def DictAvgStdChiToFormat(Dict,Chi,frmtflag='f'):
    return AvgStdChiToFormat(Dict['Avg'],Dict['Std'],Chi,frmtflag=frmtflag)

def BootAvgStdChiToFormat(Dict,Chi,frmtflag='f'):
    return AvgStdChiToFormat(Dict.Avg,Dict.Std,Chi,frmtflag=frmtflag)

def FormatToAvgStdChi(String):
    return map(float,String.strip().split())

def FormatToDictAvgStdChi(String):
    return dict(zip(['Avg','Std','Chi'],FormatToAvgStdChi(String)))



# def LREVecToFormat(iLE,iRE,iEM,DoPoF):
#     if DoPoF:
#         jSmPoFList = []
#         iSmPoFList = []
#         for iPoF in ['PoF'+str(ishift) for ishift in xrange(PoFShifts+1)]:
#             iSmPoFList += [ism+'_'+iPoF for ism in DefiSmList]
#             jSmPoFList += [jsm+'_'+iPoF for jsm in DefjSmList]
#     else:
#         iSmPoFList = DefiSmList
#         jSmPoFList = DefjSmList
#     dictout = OrderedDict()
#     dictout['Emass'] = '{0:20.10f}'.format(iEM)
#     dictout['Source_Evec'] = OrderedDict()
#     dictout['Sink_Evec'] = OrderedDict()
#     for eLE,thiskey in zip(iLE,jSmPoFList):
#         dictout['Source_Evec'][thiskey] = '{0:20.10f}'.format(eLE)
#     for eRE,thiskey in zip(iRE,iSmPoFList):
#         dictout['Sink_Evec'][thiskey] = '{0:20.10f}'.format(eRE)
#     return dictout


def xmlfitr(thefitr):
    return 'r'+'-'.join(map(str,thefitr))


def unxmlfitr(thefitr):
    if 'taufitr' in thefitr:
        return thefitr.replace('taufitr','').split('-')
    elif 'fittwor' in thefitr:
        return thefitr.replace('fittwor','').split('-')
    elif 'tsumfitr' in thefitr:
        return thefitr.replace('tsumfitr','').split('-')
    elif 'fitr' in thefitr:
        return thefitr.replace('fitr','').split('-')
    else:
        return thefitr.replace('r','').split('-')

def unxmlfitr_int(thefitr):
    return map(int,unxmlfitr(thefitr))


def rm_tsumfitr(thisfitr):
    if 'tsum' in thisfitr and '_' in thisfitr:
        outfitr = []
        for ifitr in thisfitr.split('_'):
            if 'tsum' not in ifitr:
                outfitr.append(ifitr)
        return '_'.join(outfitr)
    else:
        return thisfitr

def xmlTSink(thestr):
    return 'tsink'+str(thestr)

def unxmlTSink(thestr):
    return int(thestr.replace('tsink',''))

def ParamsToFitFlag(theFitList):
    listout = []
    for icut,cutfitlist in enumerate(theFitList):
        listout.append([])
        for ifit in cutfitlist:
            listout[icut].append(xmlfitr(ifit))
    return listout


def FitFlagXmlToOld(param,fitr):
    oldparam = param.replace('slope','sl').replace('constant','con')
    oldfitr = unxmlfitr(fitr)
    return 'fit '+oldparam+' '+oldfitr[0]+'-'+oldfitr[1]

def FitFlagXmlToOldSF(fitr):
    oldfitr = unxmlfitr(fitr)
    return oldfitr[0]+'-'+oldfitr[1]

def TOChiPDF(chi_str):
    if 'chit' in chi_str.lower():
        return r'\chi_{'+chi_str[4:].replace('2','^{2}')+'}'
    elif 'chi_{int}' in chi_str.lower() or 'chi_int' in chi_str.lower():
        return r'\chi_{int}'
    elif 'chiral' not in chi_str.lower():
        return chi_str.lower().replace('chi',r'\chi^{2}_{PDF}')
    else:
        return chi_str

def TOQ2(Q2str):
    this_number = float(Q2str.replace('Qsqrd',''))
    return r'Q^{2}='+'{:.3f}'.format(this_number)



to_leg_list = [tflowTOLeg,tsinkTOLeg,tsrcTOLeg,tsumTOLeg]

class LegendFmt(object):
    '''
    pass a string, and it will do a generic formatting
    '''

    def __init__(self,this_str):
        if not isinstance(this_str,basestring):
            raise IOError('GenericStringFmt needs a string to be passed in, got'+type(this_str)+'\n'+this_str)
        self.input_str = str(this_str)
        self.FormatLegend()

    def __str__(self):
        return self.legend_str

    def __repr__(self):
        return self.legend_str

    def FormatLegend(self):
        self.list_str = self.input_str.replace('t_f','FLOWTIMEHOLDER')
        self.list_str = self.list_str.replace(r'_{','SUBSCRIPTHOLDER')
        self.list_str = self.list_str.replace(r'\ ',' ')
        self.list_str = self.list_str.replace(' ','_').replace('__','_')
        self.list_str = self.list_str.replace(r'$','')
        self.list_str = self.list_str.split('_')
        for ic in range(len(self.list_str)):
            self.list_str[ic] = self.list_str[ic].replace('FLOWTIMEHOLDER',r't_f')
            self.list_str[ic] = self.list_str[ic].replace('SUBSCRIPTHOLDER',r'_{')
            for ifun in to_leg_list:
                self.list_str[ic] = ifun(self.list_str[ic])
            self.list_str[ic] = self.list_str[ic].replace('m_{pi}',r'm_{\pi}')
            if r'\frac{' not in self.list_str[ic]:
                self.list_str[ic] = self.list_str[ic].replace('frac{',r'\frac{')
            if r'\tilde{' not in self.list_str[ic]:
                self.list_str[ic] = self.list_str[ic].replace('tilde{',r'\tilde{')
            self.list_str[ic] = self.list_str[ic].replace('\rightarrow',r'RIGHTARROW')
            self.list_str[ic] = self.list_str[ic].replace(r'\rightarrow',r'RIGHTARROW')
            self.list_str[ic] = self.list_str[ic].replace('rightarrow',r'RIGHTARROW')
            self.list_str[ic] = self.list_str[ic].replace(r'rightarrow',r'RIGHTARROW')
            if 'chi' in self.list_str[ic].lower():
                self.list_str[ic] = TOChiPDF(self.list_str[ic])
            if 'Qsqrd' in self.list_str[ic]:
                self.list_str[ic] = TOQ2(self.list_str[ic])
            if '$' not in self.list_str[ic] and len(self.list_str[ic]) > 0:
                self.list_str[ic] = '$'+self.list_str[ic]+'$'
        self.legend_str = r' '.join(self.list_str)
        self.legend_str = self.legend_str.replace(' =','=').replace('= ','=')
        self.legend_str = self.legend_str.replace('\\\\','\\')
        # self.legend_str = self.legend_str.replace('_{PDF}_{q}','_{PDF}')
        self.legend_str = self.legend_str.replace(r'^{2}_{PDF}_{q}',r'_{q}')
        self.legend_str = self.legend_str.replace('RIGHTARROW',r'\rightarrow')

class KeyForamtting(object):
    '''
    initialise with parameters, then you can format the keys of a pandas Series
    pass this to plotdata as keyfmt_object
    '''
    def __init__(self,latparams=None):
        if latparams is not None:
            self.latparams = latparams

    def FmtTflow(self,tflow,phys=False):
        if isinstance(tflow,basestring):
            tflow_numb = get_val(tflow,this_type=str)
            if phys:
                tflow_numb_new = '{:.3f}'.format(np.sqrt(8*float(tflow_numb))*self.latparams.latspace)
            else:
                tflow_numb_new = '{:.3f}'.format(np.sqrt(8*float(tflow_numb)))
            return tflow.replace(tflow_numb,tflow_numb_new)
        else:
            if phys:
                return np.sqrt(8*tflow)*self.latparams.latspace
            else:
                return np.sqrt(8*tflow)


    def FmtTime(self,t_str,phys=False):
        if not phys:
            return t_str
        if isinstance(t_str,basestring):
            t_str_numb = get_val(t_str,this_type=str)
            t_str_numb_new = '{:.3f}'.format(float(t_str_numb)*self.latparams.latspace)
            return t_str.replace(t_str_numb,t_str_numb_new)
        else:
            return t_str*self.latparams.latspace

    def FormatKeySelect(self,this_key,physical=True):
        if isinstance(this_key,(list,tuple,np.ndarray)):
            out_key = []
            for ikey in this_key:
                if isinstance(ikey,slice):
                    out_key.append(ikey)
                elif 't_f' in ikey:
                    out_key.append(self.FmtTflow(ikey,phys=physical))
                elif ikey[0] == 't':
                    out_key.append(self.FmtTime(ikey,phys=physical))
                else:
                    out_key.append(ikey)
            return tuple(out_key)
        else:
            if isinstance(this_key,slice):
                return this_key
            elif 't_f' in this_key:
                return self.FmtTflow(this_key,phys=physical)
            elif ikey[0] == 't':
                return self.FmtTime(this_key,phys=physical)
            else:
                return this_key

    def FormatSeriesKeys(self,this_series,physical=True):
        if not isinstance(this_series,(pa.Series,pa.DataFrame)):
            return this_series
        if not hasattr(self,'latparams'):
            print 'latparams was not passed to KeyFormatting, no formatting taken place'
            return this_series
        is_series = isinstance(this_series,pa.Series)
        if is_series:
            this_series = this_series.to_frame('data')
        this_list = this_series.index.names
        this_series.reset_index(inplace=True)
        for icol,coldata in this_series[this_list].iteritems():
            if 'flow_op_trange' in icol.lower():
                this_series[icol] = coldata.apply(self.FmtTime,args=(physical,))
            elif 'flow' in icol.lower():
                this_series[icol] = coldata.apply(self.FmtTflow,args=(physical,))
            elif (  'time' in icol.lower() or 'separation' in icol.lower() \
                    or 'trange' in icol.lower()) and 'fit' not in icol.lower():
                this_series[icol] = coldata.apply(self.FmtTime,args=(physical,))
        this_series.set_index(this_list,inplace=True)
        if is_series:
            return this_series['data']
        else:
            return this_series
